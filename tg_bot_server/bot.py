import os
import logging
import sqlite3

from aiogram import Bot, Dispatcher, types, F
from aiogram.client.bot import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime

from api import send_count, send_notification
from db import init_db, is_admin, get_unread_messages_count, register_user

ADMIN_ID = os.getenv('ADMIN_ID')
API_TOKEN = os.getenv('API_TOKEN')
LOCALHOST = os.getenv('LOCALHOST')
PORT = os.getenv('PORT')


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
storage = MemoryStorage()
dp = Dispatcher(bot=bot, storage=storage)

init_db()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class AdminStates(StatesGroup):
    waiting_for_reply = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text='–ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ')],
        [KeyboardButton(text='–ú–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è')]
    ],
    resize_keyboard=True
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
admin_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text='–ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è')],
        [KeyboardButton(text='–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è')]
    ],
    resize_keyboard=True
)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–≤—Ä—É—á–Ω—É—é –≤ –ë–î –∏–ª–∏ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É)
@dp.message(Command('add_admin'))
async def add_admin_command(message: types.Message):
    if message.from_user.id == ADMIN_ID:  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID
        conn = sqlite3.connect('support_bot.db')
        cursor = conn.cursor()
        cursor.execute('INSERT OR IGNORE INTO admins VALUES (?, ?, ?, ?)', 
                      (message.from_user.id, message.from_user.username, 
                       message.from_user.first_name, message.from_user.last_name))
        conn.commit()
        conn.close()
        await message.answer("–í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!", reply_markup=admin_keyboard)
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command('start'))
async def send_welcome(message: types.Message):
    register_user(message.from_user)
    
    if is_admin(message.from_user.id):
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!", reply_markup=admin_keyboard)
    else:
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º —Å–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –º—ã —Å–∫–æ—Ä–æ –æ—Ç–≤–µ—Ç–∏–º.", 
                            reply_markup=user_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"
@dp.message(F.text == '–ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ')
async def start_message(message: types.Message):
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ:")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è" –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@dp.message(F.text == '–ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è')
async def show_unread_messages(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    conn = sqlite3.connect('support_bot.db')
    cursor = conn.cursor()
    
    cursor.execute('''
    SELECT m.message_id, m.user_id, m.message_text, m.timestamp, u.username, u.first_name, u.last_name
    FROM messages m
    JOIN users u ON m.user_id = u.user_id
    WHERE m.is_answered = 0
    ORDER BY m.timestamp
    ''')
    
    messages = cursor.fetchall()
    conn.close()
    
    if not messages:
        await message.answer("–ù–µ—Ç –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.")
        return
    
    for msg in messages:
        message_id, user_id, message_text, timestamp, username, first_name, last_name = msg
        user_info = f"@{username}" if username else f"{first_name} {last_name}"
        
        await message.answer(
            f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_info} (ID: {user_id})\n"
            f"üïí {timestamp}\n"
            f"‚úâÔ∏è {message_text}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="–û—Ç–≤–µ—Ç–∏—Ç—å", 
                    callback_data=f"reply_{user_id}_{message_id}"
                )]
            ])
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è" –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@dp.message(F.text == '–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è')
async def show_unread_messages(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    conn = sqlite3.connect('support_bot.db')
    cursor = conn.cursor()
    
    cursor.execute('''
    SELECT m.message_id, m.user_id, m.message_text, m.timestamp, u.username, u.first_name, u.last_name
    FROM messages m
    JOIN users u ON m.user_id = u.user_id
    ORDER BY m.timestamp
    ''')
    
    messages = cursor.fetchall()
    conn.close()
    
    if not messages:
        await message.answer("–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π.")
        return
    
    for msg in messages:
        message_id, user_id, message_text, timestamp, username, first_name, last_name = msg
        user_info = f"@{username}" if username else f"{first_name} {last_name}"
        
        await message.answer(
            f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_info} (ID: {user_id})\n"
            f"üïí {timestamp}\n"
            f"‚úâÔ∏è {message_text}"
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û—Ç–≤–µ—Ç–∏—Ç—å"
@dp.callback_query(F.data.startswith('reply_'))
async def process_reply_callback(callback_query: types.CallbackQuery, state: FSMContext):
    _, user_id, message_id = callback_query.data.split('_')
    
    await callback_query.answer()
    
    await state.update_data(
        recipient_id=user_id,
        original_message_id=message_id
    )
    
    await state.set_state(AdminStates.waiting_for_reply)
    await callback_query.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@dp.message(AdminStates.waiting_for_reply)
async def process_admin_reply(message: types.Message, state: FSMContext):
    data = await state.get_data()
    user_id = data['recipient_id']
    original_message_id = data['original_message_id']
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.send_message(
            user_id,
            f"üîµ –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n{message.text}"
        )
        
        # –ü–æ–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ—Ç–≤–µ—á–µ–Ω–Ω–æ–µ –≤ –ë–î
        conn = sqlite3.connect('support_bot.db')
        cursor = conn.cursor()
        cursor.execute('UPDATE messages SET is_answered = 1, admin_id = ? WHERE message_id = ?',
                      (message.from_user.id, original_message_id))
        conn.commit()
        conn.close()
        
        send_count(LOCALHOST, PORT)

        await message.answer("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!", reply_markup=admin_keyboard)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –≤–æ–∑–º–æ–∂–Ω–æ, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.")
    
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ú–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è" –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message(F.text == '–ú–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è')
async def show_user_messages(message: types.Message):
    conn = sqlite3.connect('support_bot.db')
    cursor = conn.cursor()
    
    cursor.execute('''
    SELECT m.message_text, m.timestamp, m.is_answered, a.first_name, a.last_name
    FROM messages m
    LEFT JOIN admins a ON m.admin_id = a.admin_id
    WHERE m.user_id = ?
    ORDER BY m.timestamp DESC
    LIMIT 10
    ''', (message.from_user.id,))
    
    messages = cursor.fetchall()
    conn.close()
    
    print(messages)


    if not messages:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π.")
        return

    response = "–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n\n"
    for msg in messages:
        message_text, timestamp, is_answered, admin_first_name, admin_last_name = msg
        status = "üîµ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω" if is_answered else "üü° –û–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞"
        admin_info = f" –æ—Ç {admin_first_name} {admin_last_name}" if is_answered else ""
        
        response += (
            f"üìÖ {timestamp}\n"
            f"‚úâÔ∏è {message_text}\n"
            f"üîÑ {status}{admin_info}\n\n"
        )
    
    await message.answer(response)

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message(F.text)
async def save_user_message(message: types.Message):
    if is_admin(message.from_user.id):
        return
    
    register_user(message.from_user)
    
    conn = sqlite3.connect('support_bot.db')
    cursor = conn.cursor()
    
    cursor.execute('INSERT INTO messages (user_id, message_text, timestamp) VALUES (?, ?, ?)',
                  (message.from_user.id, message.text, datetime.now().strftime("%Y-%m-%d %H:%M:%S")))
    conn.commit()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    cursor.execute('SELECT admin_id FROM admins')
    admins = cursor.fetchall()
    
    conn.close()
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    for admin in admins:
        try:
            unread_count = get_unread_messages_count()
            await bot.send_message(
                admin[0],
                f"üì® –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username or '–Ω–µ—Ç username'}\n"
                f"‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ: {message.text}\n\n"
                f"–í—Å–µ–≥–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö: {unread_count}",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(
                        text="–û—Ç–≤–µ—Ç–∏—Ç—å", 
                        callback_data=f"reply_{message.from_user.id}_{cursor.lastrowid}"
                    )]
                ])
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin[0]}: {e}")
    
    send_notification(LOCALHOST, PORT)
    send_count(LOCALHOST, PORT)

    await message.answer("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.", reply_markup=user_keyboard)


async def on_startup():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")

if __name__ == '__main__':
    dp.startup.register(on_startup)
    dp.run_polling(bot)